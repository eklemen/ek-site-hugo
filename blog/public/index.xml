<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Evans Blog</title>
    <link>http://evanklemen.com/blog/</link>
    <description>Recent content on Evans Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://evanklemen.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a RESTful API with Symfony3</title>
      <link>http://evanklemen.com/blog/post/symfonyapi/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://evanklemen.com/blog/post/symfonyapi/</guid>
      <description>Intro I&amp;rsquo;m going to be utilizing Symfony 3 to build out a RESTful API.
Disclaimer: I am not a PHP developer. I am merely documenting my learning and process I was exposed to. This walkthrough does not address security flaws which exist in this application.
Stuff you need to install  PHP (I&amp;rsquo;m using version 7.1.2) MySQL Symfony framework  The easiest way to tackle the first 2 steps above are via homebrew.</description>
    </item>
    
    <item>
      <title>Hugo post on Hugo</title>
      <link>http://evanklemen.com/blog/post/hugo/</link>
      <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://evanklemen.com/blog/post/hugo/</guid>
      <description>Intro Hugo is a static site generator, not unlike Jekyll or one of the many others out there. There&amp;rsquo;s a decent number of themes to choose from, and the simplicity to get a functioning site up and running in such little time/effor made this an appealing choice. The appeal of a static site generator is that the build files are&amp;hellip; well static. This keeps hosting cheap, and you generally don&amp;rsquo;t need to worry about security breaches cough wordpress.</description>
    </item>
    
  </channel>
</rss>